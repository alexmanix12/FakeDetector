#Importing the library
import matplotlib.pyplot as plt
import keras_ocr
import os
import enchant

# These hyperparameters may need optimisation
OVERLAP_LIMIT = 3
CHARACTER_LIMIT = 3

"""
Detector for text in generated images. 
- First we check the density of detected texts, where a high number of overlaps 
indicate smudged letters.
- If this test is passed, we check the meaning of found words against a dictionary.
If the word is in the dictionary, this generally decreases the odds of the image
being generated
- Exceptions of this are brand names and common words such as "the". Image generators
are good at generating this text, so their appearance should not influence the final
result too heavily, though there are cases where common words such as "the" are 
repeated, and brand names are miss-spelt
"""
class TextDetector:
    def __init__(self):
        self.pipeline = keras_ocr.pipeline.Pipeline()
        self.the_dict = enchant.Dict("en_GB")
        self.brands = []
        self.words = []
        with open("brands.txt", 'rb') as file:
            lines = file.readlines()
            for line in lines:
                try:
                    self.brands.append(line)
                    self.the_dict.add(line)
                except:
                    continue

        with open("words.txt", 'r') as file:
            for line in file.readlines()[:20]:
                self.words.append(line)

        self.brands = set(self.brands)
        self.words = set(self.words)
        

    """
    Method to check the results of a scanned image
    """
    def testImage(self, image):
        if self.__check_boxes(image):
            return 1
        else:
            return self.__check_rand(image)

    """
    Method to check whether the found boxes have more overlaps than the limit
    Param: image  -  a prediction from the group the pipeline
    """
    def __check_boxes(self, image):
        for box_index in range(len(image)):
            overlaps = 0
            for other_box_index in range(len(image)):
                if box_index != other_box_index:
                    overlaps += self.__check_overlap(image[box_index][1])
            # If over the overlap_limit, it indicates the text is blurred, 
            # indicating it is possibly generated by diffusion methods
            if overlaps > OVERLAP_LIMIT:
                return True
        return False

    """
    Method to test a folder of images
    """
    def testFolder(self, image_folder):
        # Find images in given folder
        images = [os.path.join(image_folder, file) for file in os.listdir(image_folder)]
        # Read these using provided tools
        image_files = [keras_ocr.tools.read(image) for image in images]
        # Find text in the images
        prediction_groups = self.pipeline.recognize(image_files)

        results = [self.testImage(im) for im in prediction_groups]

        return zip(images, results)

    def __check_rand(self, image):
        valid = False
        for word in image:
            # If a word is found that is longer than the character limit, then there was
            # actual text detected in the picture. If said word also turns out to be
            # an english word, then this would indicate the picture is authentic,
            # thus we return False.
            if len(word[0]) > CHARACTER_LIMIT and self.the_dict.check(word[0]):
                # If a word is a brand name or a common word, then we ignore this 
                # as it does not clearly indicate either way if the text is generated
                # or not
                # TODO: Add words as "generated" here
                if word[0] in self.brands or word[0] in self.words:
                    continue
                return -1
            # If the word is longer than the character limit, but not an english word,
            # this is indicative of gibberish, so an inauthentic picture.
            elif len(word[0] > CHARACTER_LIMIT):
                return 1
        # In the case that no word longer than the character limit is detected, we return
        # False, and assume no real text was detected in the image.
        return 0

    def __check_overlap(x, y):
        return not (
            x[0][0] < y[0][0] or 
            x[0][0] > y[2][0] or 
            x[2][1] < y[0][1] or 
            x[0][1] > y[2][1]
        )